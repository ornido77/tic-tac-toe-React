{"version":3,"sources":["Tictactoe.js","App.js","index.js"],"names":["Tictactoe","useState","currentTurn","setTurn","Array","fill","cells","setCells","winner","setWinner","handleClick","num","squares","combos","across","down","diagonal","combo","forEach","pattern","checkForWinner","alert","Cell","onClick","className","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAkIeA,EA/HG,WAGjB,MAA+BC,mBAAS,KAAxC,mBAAOC,EAAP,KAAoBC,EAApB,KAGA,EAA0BF,mBAASG,MAAM,GAAGC,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAA4BN,qBAA5B,mBAAOO,EAAP,KAAeC,EAAf,KAuCMC,EAAc,SAACC,GAEpB,GAAmB,KAAfL,EAAMK,IAIV,GAAe,MAAXH,GAA6B,MAAXA,EAAtB,CAIA,IAAII,EAAO,YAAON,GAEE,MAAhBJ,GACHU,EAAQD,GAAO,IACfR,EAAQ,OAERS,EAAQD,GAAO,IACfR,EAAQ,MApDa,SAACS,GACvB,IAAIC,EAAS,CACZC,OAAQ,CACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,KAAM,CACL,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAERC,SAAU,CACT,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAGT,IAAK,IAAIC,KAASJ,EACjBA,EAAOI,GAAOC,SAAQ,SAACC,GAEG,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KACQ,KAAxBP,EAAQO,EAAQ,KAGhBP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KACxCP,EAAQO,EAAQ,MAAQP,EAAQO,EAAQ,KAExCV,EAAUG,EAAQO,EAAQ,QA0B7BC,CAAeR,GACfL,EAASK,SAjBRS,MAAM,0BAkCFC,EAAO,SAAC,GAAa,IAAXX,EAAU,EAAVA,IACf,OAAO,oBAAIY,QAAS,kBAAMb,EAAYC,IAA/B,SAAsCL,EAAMK,MAEpD,OACC,sBAAKa,UAAU,YAAf,UACC,iDACA,sBAAKA,UAAU,YAAf,UACC,4CACY,+BAAOtB,OAEnB,wBAAQqB,QAAS,kBAfnBhB,EAASH,MAAM,GAAGC,KAAK,KACvBF,EAAQ,UACRM,EAAU,OAaR,sBAGD,gCACC,kCACC,+BACC,cAACa,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEZ,+BACC,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,OAEZ,+BACC,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,IACX,cAACW,EAAD,CAAMX,IAAK,YAIbH,GACA,qCACC,oBAAGgB,UAAU,MAAb,UAAoBhB,EAApB,qBACA,wBAAQe,QAAS,kBA/CpBd,EAAU,MACVF,EAASH,MAAM,GAAGC,KAAK,UACvBF,EAAQ,MA6CL,+BCjHUsB,MARf,WACC,OACC,qBAAKD,UAAU,MAAf,SACC,cAAC,EAAD,OCDHE,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.eeebdbe3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ttt.css\";\r\n\r\nconst Tictactoe = () => {\r\n\t/* This state will tell us whose turn is next.\r\n\t And will help to decide if X or O will be displayed in a certain grid if it's been clicked.*/\r\n\tconst [currentTurn, setTurn] = useState(\"x\");\r\n\r\n\t/* This state sets what will be shown on the grids */\r\n\tconst [cells, setCells] = useState(Array(9).fill(\"\"));\r\n\r\n\t/* This state will be set if there is a winning combination, and will be shown on the UI */\r\n\tconst [winner, setWinner] = useState();\r\n\r\n\t/* This function contains the logic to compute if there is a winner. \r\n\tHaving an array of all possible winning combinations. */\r\n\tconst checkForWinner = (squares) => {\r\n\t\tlet combos = {\r\n\t\t\tacross: [\r\n\t\t\t\t[0, 1, 2],\r\n\t\t\t\t[3, 4, 5],\r\n\t\t\t\t[6, 7, 8],\r\n\t\t\t],\r\n\t\t\tdown: [\r\n\t\t\t\t[0, 3, 6],\r\n\t\t\t\t[1, 4, 7],\r\n\t\t\t\t[2, 5, 8],\r\n\t\t\t],\r\n\t\t\tdiagonal: [\r\n\t\t\t\t[0, 4, 8],\r\n\t\t\t\t[2, 4, 6],\r\n\t\t\t],\r\n\t\t};\r\n\t\tfor (let combo in combos) {\r\n\t\t\tcombos[combo].forEach((pattern) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tsquares[pattern[0]] === \"\" ||\r\n\t\t\t\t\tsquares[pattern[1]] === \"\" ||\r\n\t\t\t\t\tsquares[pattern[2]] === \"\"\r\n\t\t\t\t) {\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tsquares[pattern[0]] === squares[pattern[1]] &&\r\n\t\t\t\t\tsquares[pattern[1]] === squares[pattern[2]]\r\n\t\t\t\t) {\r\n\t\t\t\t\tsetWinner(squares[pattern[0]]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/* This function changes the value of each grid as X and O */\r\n\tconst handleClick = (num) => {\r\n\t\t// If it already has a value, then it cannot be clicked again\r\n\t\tif (cells[num] !== \"\") {\r\n\t\t\talert(\"Already been clicked!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (winner === \"x\" || winner === \"o\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet squares = [...cells];\r\n\r\n\t\tif (currentTurn === \"x\") {\r\n\t\t\tsquares[num] = \"x\";\r\n\t\t\tsetTurn(\"o\");\r\n\t\t} else {\r\n\t\t\tsquares[num] = \"o\";\r\n\t\t\tsetTurn(\"x\");\r\n\t\t}\r\n\t\tcheckForWinner(squares);\r\n\t\tsetCells(squares);\r\n\t};\r\n\r\n\t// Handles Play again button\r\n\tconst handleRestart = () => {\r\n\t\tsetWinner(null);\r\n\t\tsetCells(Array(9).fill(\"\"));\r\n\t\tsetTurn(\"x\");\r\n\t};\r\n\r\n\t// Handles Reset button\r\n\tconst handleReset = () => {\r\n\t\tsetCells(Array(9).fill(\"\"));\r\n\t\tsetTurn(\"x\");\r\n\t\tsetWinner(null);\r\n\t};\r\n\r\n\tconst Cell = ({ num }) => {\r\n\t\treturn <td onClick={() => handleClick(num)}>{cells[num]}</td>;\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"Container\">\r\n\t\t\t<h1>Tic - Tac - Toe</h1>\r\n\t\t\t<div className=\"turnReset\">\r\n\t\t\t\t<p>\r\n\t\t\t\t\tYour turn: <span>{currentTurn}</span>\r\n\t\t\t\t</p>\r\n\t\t\t\t<button onClick={() => handleReset()}>Reset</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<table>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={0} />\r\n\t\t\t\t\t\t<Cell num={1} />\r\n\t\t\t\t\t\t<Cell num={2} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={3} />\r\n\t\t\t\t\t\t<Cell num={4} />\r\n\t\t\t\t\t\t<Cell num={5} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<Cell num={6} />\r\n\t\t\t\t\t\t<Cell num={7} />\r\n\t\t\t\t\t\t<Cell num={8} />\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t\t{winner && (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<p className=\"win\">{winner} is the winner!</p>\r\n\t\t\t\t\t<button onClick={() => handleRestart()}>Play Again</button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Tictactoe;\r\n","import Tictactoe from \"./Tictactoe\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Tictactoe />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}